# apm_option: options parsing for ardupilotmega
#
# OPTIONS:
#   ADVANCED - indicates this option is advaned (hidden in gui unless advanced selected)
#   DEFINE_ONLY - this flag either indicates that the variable is defined if true, and not defined if false
#   BUILD_FLAG - this flag forces the variable to be added to build flags, for files that
#       don't include the config header
#
# SINGLE INPUT ARGUMENTS: (can only pass one arguments)
#   TYPE - the type of the argument (BOOL for on/off variables/ STRING for all others)
#   DESCRIPTION - description of option, shown as tool-tip and written in config file
#   DEFAULT - the default value of the option
#
# MULTIPLE VARIABLE ARGUMENTS: (can pass a lit of items)
#   OPTIONS - values that this option may take, if only a finite set is possible, creates combo-box in gui 
#   DEPENDS - a list of booleans that this argument depends on, can be used to disable options when the
#       are not appropriate
#
# Author: James Goppert, Daniel Frenzel
#
function(apm_option NAME)
  cmake_parse_arguments(ARG
      "ADVANCED;DEFINE_ONLY;BUILD_FLAG"
      "TYPE;DESCRIPTION;DEFAULT" "OPTIONS;DEPENDS" ${ARGN})

  # if option dependencies not met, hide the option
  foreach(DEPEND ${ARG_DEPENDS})
      if (NOT ${${DEPEND}})
          message(STATUS "\tfailed dep: ${DEPEND}")
          set(ARG_TYPE "INTERNAL")
          set("${NAME}" "${ARG_DEFAULT}" CACHE INTERNAL "${ARG_DESCRIPTION}" FORCE) 
          return()
      endif()
  endforeach()

  # set variable
  #unset("${NAME}" CACHE) # clear cache variable
  set("${NAME}" "${ARG_DEFAULT}" CACHE  "${ARG_TYPE}" "${ARG_DESCRIPTION}") 

  # force variable reinit if it was internal (hidden)
  get_property(VAR_TYPE CACHE ${NAME} PROPERTY TYPE) 
  if ("${VAR_TYPE}" STREQUAL "INTERNAL")
      message(STATUS "\tVAR_TYPE: ${VAR_TYPE}")
      set("${NAME}" "${ARG_DEFAULT}" CACHE "${ARG_TYPE}" "${ARG_DESCRIPTION}" FORCE) 		

  # if a build flag, add it to the build flag list
  elseif( ${ARG_BUILD_FLAG} )
      message ( STATUS "Found build flag: " ${NAME} ) 
      set(APM_BUILD_FLAGS_LIST ${APM_BUILD_FLAGS_LIST} ${NAME} CACHE INTERNAL "list of all build flags")
      list( REMOVE_DUPLICATES APM_BUILD_FLAGS_LIST )

  # if not hidden, and not a build flag, add it to the global options list
  else()
      message ( STATUS "Found option: " ${NAME} )
      set(APM_OPTIONS_LIST ${APM_OPTIONS_LIST} ${NAME} CACHE INTERNAL "list of all options")
      list( REMOVE_DUPLICATES APM_OPTIONS_LIST )
  endif()

  # set list of options
  if ( NOT ARG_OPTIONS )
      set_property(CACHE "${NAME}" PROPERTY STRINGS ${ARG_OPTIONS})
      list(FIND ARG_OPTIONS "${ARG_DEFAULT}" ARG_POSITION)
      if (ARG_POSITION EQUAL -1)
          message(FATAL_ERROR "default value: ${ARG_DEFAULT} not in given set of options: ${ARG_OPTIONS}")
      endif()
  endif()

  # mark as advanced if advanced option given
  if(ARG_ADVANCED)
      mark_as_advanced(FORCE "${NAME}")
  endif()

  if(ARG_DEFINE_ONLY)
      set("${NAME}_DEFINE_ONLY" TRUE CACHE INTERNAL "Define only?" FORCE) 
  else()
      set("${NAME}_DEFINE_ONLY" FALSE CACHE INTERNAL "Define only?" FORCE) 
  endif()	
endfunction()

# apm_option_generate_config: generates a config file using the list of options.
#
# SINGLE INPUT ARGUMENTS: (can only pass one arguments)
#   FILE - the file to write the config to
#   BUILD_FLAGS - variable to store build flags in
#
# Author: James Goppert, Daniel Frenzel
#
function(apm_option_genflags)
  cmake_parse_arguments(ARG "" "BUILD_FLAGS" "" ${ARGN})

  if( APM_BUILD_FLAGS_LIST )
    list( REMOVE_DUPLICATES APM_BUILD_FLAGS_LIST )
  endif()

  set(FLAGS "")
    foreach(ITEM ${APM_BUILD_FLAGS_LIST})
      set(${ARG_BUILD_FLAGS} "" CACHE INTERNAL "build flags")
      get_property(ITEM_VALUE CACHE ${ITEM} PROPERTY VALUE)

      if( ${${ITEM}_DEFINE_ONLY} )
        if (${ITEM_VALUE})
          set(FLAGS ${FLAGS} "-D${ITEM}")
          set(${ARG_BUILD_FLAGS} ${FLAGS} CACHE INTERNAL "build flags")
        endif()
      else()
        set(FLAGS ${FLAGS} "-D${ITEM}=${ITEM_VALUE}")
        set(${ARG_BUILD_FLAGS} ${FLAGS} CACHE INTERNAL "build flags")
      endif()
    endforeach()
endfunction()

# apm_option_generate_config: generates a config file using the list of options.
#
# SINGLE INPUT ARGUMENTS: (can only pass one arguments)
#   FILE - the file to write the config to
#   BUILD_FLAGS - variable to store build flags in
#
# Author: James Goppert, Daniel Frenzel
#
function(apm_option_genhfile)
    cmake_parse_arguments(ARG "" "FILE" "" ${ARGN})

    # options
    if( APM_OPTIONS_LIST )
        list( REMOVE_DUPLICATES APM_OPTIONS_LIST )
    endif()
	
    file (WRITE "${CMAKE_BINARY_DIR}/${ARG_FILE}" "/*\n *This file is automatically generated by cmake, do not edit it\n */\n")

    foreach(ITEM ${APM_OPTIONS_LIST})
        get_property(ITEM_VALUE CACHE ${ITEM} PROPERTY VALUE) 
        get_property(ITEM_HELP CACHE ${ITEM} PROPERTY HELPSTRING)
		
        if( ${${ITEM}_DEFINE_ONLY} )
            if( ITEM_VALUE )
                file(APPEND "${CMAKE_BINARY_DIR}/${ARG_FILE}" "\n#define ${ITEM} // Value: ${ITEM_VALUE}, Description: (${ITEM_HELP})")
            else()
                file(APPEND "${CMAKE_BINARY_DIR}/${ARG_FILE}" "\n//#define ${ITEM} // Description: ${ITEM_HELP}")
            endif()
        else()
            file(APPEND "${CMAKE_BINARY_DIR}/${ARG_FILE}" "\n#define ${ITEM} ${ITEM_VALUE} // Description: ${ITEM_HELP}")
        endif()
    endforeach()
endfunction()

# apm_find_flag_parameter: Input is a list of build flags (string list), 
# and the name of a particular flag. 
# The output is the value of this flag.
#
# Author: Daniel Frenzel
#
function(apm_find_flag_parameter INP_FLAGS INP_SEARCH_FLAG OUT_PARAMETER)
  set( ${OUT_PARAMETER} "" PARENT_SCOPE )

  foreach( FLAG ${INP_FLAGS} )
    string( FIND ${FLAG} ${INP_SEARCH_FLAG} FLAG_FND )
    if( ${FLAG_FND} GREATER -1 )
      string( FIND ${FLAG} "=" FLAG_DELIM )
      
      # Is the string just a sub string of a similar named string?
      string( LENGTH ${INP_SEARCH_FLAG} INP_SEARCH_FLAG_SIZE )
      math( EXPR SUFFIX_FOUND "${FLAG_DELIM}-(${FLAG_FND}+${INP_SEARCH_FLAG_SIZE})" )
      
      if(NOT ${SUFFIX_FOUND} EQUAL 0)
        # just go on
        #message( STATUS "SUFFIX_FOUND: ${FLAG_FND}" )
      elseif( NOT ${FLAG_FND} EQUAL 2)
        # just go on
        #message( STATUS "PREFIX_FOUND: ${FLAG_FND}" )
      elseif( ${FLAG_DELIM} GREATER -1 )      
        string( LENGTH ${FLAG} SKETCHLN )
        math( EXPR FLAG_DELIM "${FLAG_DELIM}+1" )
        math( EXPR SKETCHLN "${SKETCHLN}-${FLAG_DELIM}" )     
        string( SUBSTRING ${FLAG} ${FLAG_DELIM} ${SKETCHLN} PARAMETER )
        
        # Remove '"' signs, if there :D
        string(REPLACE "\"" "" PARAMETER ${PARAMETER})
        
        # save it to global variable
        set( ${OUT_PARAMETER} ${PARAMETER} PARENT_SCOPE )
      endif()
    endif()
  endforeach()
endfunction()

# apm_delete_disabled_flags: Input is a list of build flags (string list), 
# The function removes all flags with the 'DISABLED' parameter,
# and saves them back to 'OUT_FLAGS'
#
# Author: Daniel Frenzel
#
function(apm_delete_disabled_flags INP_FLAGS OUT_FLAGS)
  # Delete disbaled build flags
  foreach( FLAG ${INP_FLAGS} )
    STRING( FIND ${FLAG} "DISABLED" DISABLE_FLAG )
    if( ${DISABLE_FLAG} GREATER -1 )
      list(REMOVE_ITEM INP_FLAGS ${FLAG} )
    endif()
  endforeach()
  
  set( ${OUT_FLAGS} ${INP_FLAGS} PARENT_SCOPE)
endfunction()